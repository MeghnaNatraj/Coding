The most difficult project that I have worked on till date is SmartBlogger. This was part of an internship at Cognizant, where intern teams from cities all over the country, over 36 teams, have to solve a problem given to them.

My team and I were asked to address the following issue: 
With Social media conversations and number of people participating in the conversations growing exponentially, valuable information and expertise is lost in this information overload. Develop an app to summarize free text (social media conversations like Blogs, Posts and Comments) and come out with the keywords (nouns and adjectives). 

Solution : 
The key parts are:
Summarize: Given a free flowing text (English only) the algorithm should identify the keywords (nouns and adjectives).
Synonymize: Tag root words for each of the keywords identified.
Personalize: Build profiles/personas of associates by tying back the root words identifies back to the person making such posts

The Smart Blogger Application is a utility that enables Cognizant's associates to share their thoughts on various topics. This app allows a user to voice his opinion on any topic, in the form of a blog post. The user of this app can search for content relevant to any topic, written by any other user. This app also generates tags automatically from a blog post and let the user pick keywords relevant to his post. This application provides a clean and convenient way of sharing thoughts between associates.

This was the most difficult project as I had no prior experience in programming a natural language processing tool. We had to read papers from the international journal of artificial intelligence to find a relevant article to create an application that uses no external library or NLP tools. I got to learn about implementing algorithms that work on real-time data. We had to follow an SDLC processes, meet requirement standards set by our mentors and the organization. We were a team of 3 who worked remotely and also faced issues working on a new platform and programming languages. 

What I would've done differently, is to get hands on practice on learning the technologies that would be used (ASP.NET, AJAX, Basic Javascript and HTML) in the initial phase so that we wouldn't face issues later when the project work began. Creating prototypes and initial working models before we add more features would have helped us complete an initial version sooner. Co-ordinating tasks amongst team members so that someone is always working on the project wouldâ€™ve have also been useful. As we were not used to using version-control tools, we had a learning curve trying to use the tools provided by Cognizant. Working on new tools early to just get hands-on experience is the main task that I would have done differently.